import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:real_estate_app/models/comment.dart';
import 'package:real_estate_app/repository/declarations.dart';
import 'package:real_estate_app/screen/contact_agent_screen.dart';
import 'package:real_estate_app/screen/login_screen.dart';
import 'package:real_estate_app/services/comment_count_services.dart';
import 'package:real_estate_app/services/post_comment_service.dart';
import 'package:real_estate_app/services/property_gallery_service.dart';
import 'package:real_estate_app/widget/carousel_slider.dart';
import 'package:real_estate_app/widget/header.dart';
import 'package:shared_preferences/shared_preferences.dart';

class PropertyDetail extends StatefulWidget {
  final int propertyId;
  final String propertyTitle;
  final String propertySlug;
  final String propertyImage;
  final int propertyPrice;
  final String propertyType;
  final String propertyPurpose;
  final String propertyDescription;
  final String propertyCity;
  final String propertyAddress;
  final int propertyBedroom;
  final int propertyBathroom;
  final int propertyArea;
  final int agentId;
  final String nearBy;
  PropertyDetail(
      {this.propertyId,
      this.propertyTitle,
      this.propertySlug,
      this.propertyImage,
      this.propertyPrice,
      this.propertyPurpose,
      this.propertyType,
      this.propertyDescription,
      this.propertyCity,
      this.propertyAddress,
      this.propertyBedroom,
      this.propertyBathroom,
      this.propertyArea,
      this.agentId,
      this.nearBy});
  @override
  _PropertyDetailState createState() => _PropertyDetailState();
}

class _PropertyDetailState extends State<PropertyDetail> {
  PropertyGalleryService _propertyGalleryService = PropertyGalleryService();
    List<Comments> _commentList = List<Comments>();
  final txtbody = TextEditingController();
  bool _loading = true;
  var items = [];
  var displayImage = [];
  bool islogin = false;

  var authToken;
  //get Token
  void _fetchAndRedirect() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    if (mounted) {
      setState(() {
        authToken = prefs.getString('token');
        // print('The Token set is  $authToken');
      });
    }
    if (authToken != null) {
      if (mounted) {
        setState(() {
          islogin = true;
        });
      }
    }
  }

  @override
  void dispose() {
    _getAllSliders();
    _fetchAndRedirect();
    getComment();
    super.dispose();
  }

  void initState() {
    super.initState();
    _fetchAndRedirect();
    // print(this.widget.propertySlug);
    getComment();
    _getAllSliders();
    
  }

  _getAllSliders() async {
    var responseJson = await _propertyGalleryService
        .getPropertiesGallery(this.widget.propertyId);
    if (responseJson == null ||
        responseJson == 'Unauthenticated' ||
        responseJson == 'SocketException' ||
        responseJson == 'NetworkError') {
      // var result = json.decode(responseJson.body);
      // print(result);
      if (mounted) {
        setState(() {
          _loading = true;
        });
      }
    } else {
      responseJson['data'].forEach((data) {
        //  print(imgUrl.sliderImgUrl + data['name']);
        if (mounted) {
          setState(() {
            items.add(NetworkImage(Imgurl.sliderImgUrl + data['name']));
            displayImage.add(Imgurl.sliderImgUrl + data['name']);

            _loading = false;
          });
        }
      });
    }
  }

  sendComment() async{
    Map data = {
      'body': txtbody.text,
    };
     SharedPreferences prefs = await SharedPreferences.getInstance();
    var authToken = prefs.getString('token');
    var postComment = PostCommentService();
    var response = await postComment.postComment(authToken, this.widget.propertyId, data);
    // print(response.statusCode);
    if (response.statusCode == 200) {
      json.decode(response.body);
      // print(result['message']);
    }
  }
  getComment() async{
    var getComment = CommentCountService();
    var response = await getComment.getComments(this.widget.propertySlug);
    // print(response.statusCode);
    if (response.statusCode == 200) {
      var result = json.decode(response.body);
      result['users'].forEach((user) {
        var model = Comments();
        // model.id = user['id'];
        model.body = user['body'];
        model.userName = user['users']['name'];
        model.image = Imgurl.usersUrl + user['users']['image'];
        print(Imgurl.usersUrl + user['users']['image']);
        if(mounted){
        setState(() {
          _commentList.add(model);
        });
        }
      });
    }

  }



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // drawer: islogin?drawerWidget(context):null,
      appBar: header(context,
          isAppTitle: false, titleText: '${this.widget.propertyTitle}'),
      body: _loading
          ? Center(
              child: CircularProgressIndicator(),
            )
          : ListView(
              scrollDirection: Axis.vertical,
              children: <Widget>[
                Container(
                  child: Column(
                    children: <Widget>[
                      carouselSlider(items),

                      Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: <Widget>[
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                children: <Widget>[
                              Expanded(
                                child: Text(
                                      '${this.widget.propertyTitle}', 
                                      textAlign: TextAlign.start,
                                      overflow: TextOverflow.ellipsis,
                                      style: TextStyle(
                                        color: Theme.of(context).accentColor, 
                                        fontSize: 20.0,
                                        fontWeight: FontWeight.bold
                                      ),
                                    ),
                                  ),
                                  Expanded(
                                 child: Padding(
                                   padding: const EdgeInsets.only(left:80.0),
                                   child: Text(
                                        'N${this.widget.propertyPrice}',
                                         overflow: TextOverflow.ellipsis,
                                          style: TextStyle(
                                          color: Colors.red, 
                                          fontSize: 20.0,
                                          fontWeight: FontWeight.bold
                                        ),
                                      ),
                                 ),
                                  ),
                                ],
                              ),
                              Row(
                                children: <Widget>[
                                  Expanded(
                                  child: Text(
                                      '${this.widget.propertyAddress}, ${this.widget.propertyCity}',
                                      textAlign: TextAlign.start,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ],
                              ),
                              Divider(),
                              Padding(
                                padding: const EdgeInsets.only(left: 0.0),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  mainAxisSize: MainAxisSize.max,
                                  children: <Widget>[
                                    Row(
                                      children: <Widget>[
                                        Icon(Icons.hot_tub),
                                        Text(
                                            '${this.widget.propertyBathroom} Bath',
                                            style: TextStyle(
                                                color: Colors.black,
                                                fontWeight: FontWeight.bold)),
                                                SizedBox(width: 15.0,),
                                        Icon(Icons.airline_seat_flat),
                                        Text(
                                            '${this.widget.propertyBedroom} Bed',
                                            style: TextStyle(
                                                color: Colors.black,
                                                fontWeight: FontWeight.bold)),
                                                 SizedBox(width: 15.0,),
                                        Icon(Icons.home),
                                        Text(
                                            '${this.widget.propertyArea} sq.ft',
                                            style: TextStyle(
                                                color: Colors.black,
                                                fontWeight: FontWeight.bold)),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                  Divider(color: Colors.grey,),
                               Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text("Photo Gallery", style: TextStyle(color: Theme.of(context).accentColor, fontWeight: FontWeight.bold),),
                ),
                Divider(color: Colors.grey,),
                SizedBox(
                  height: MediaQuery.of(context).size.height / 6.9,
                  child: ListView.builder(
                      shrinkWrap: true,
                      scrollDirection: Axis.horizontal,
                      itemCount: this.items.length,
                      itemBuilder: (context, index) {
                        return Container(
                          margin: EdgeInsets.all(5.0),
                          width: MediaQuery.of(context).size.width / 2.9,
                          //  height: MediaQuery.of(context).size.height / 2.9,
                          decoration: BoxDecoration(
                              // borderRadius: BorderRadius.only(
                              //     topLeft: Radius.circular(20.0),
                              //     topRight: Radius.circular(20.0)),
                              borderRadius:BorderRadius.circular(20.0),
                              image: DecorationImage(
                                  image: NetworkImage(
                                      this.displayImage[index].toString()),
                                  fit: BoxFit.cover)),
                        );
                      }),
                ),
                              Divider(),
                              Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: <Widget>[
                                  Text('Property Description', style: TextStyle(color: Theme.of(context).accentColor, fontWeight: FontWeight.bold),),
                                  Container(
                                      height: 29.0,
                                      margin: EdgeInsets.all(4.8),
                                      decoration: BoxDecoration(
                                          borderRadius:
                                              BorderRadius.circular(20.0),
                                          color:
                                              Theme.of(context).primaryColor),
                                      child: FlatButton(
                                          onPressed: () {
                                            Navigator.push(
                                                context,
                                                MaterialPageRoute(
                                                    builder: (context) =>
                                                        ContactAgent(
                                                            agentId: this
                                                                .widget
                                                                .agentId,
                                                            propertyImage: this
                                                                .widget
                                                                .propertyImage, propertyId:this.widget.propertyId)));
                                          },
                                          child: Text(
                                            'Contact Agent',
                                            style:
                                                TextStyle(color: Colors.white),
                                          )))
                                ],
                              ),
                              Container(
                                  width: MediaQuery.of(context).size.width,
                                  // height: MediaQuery.of(context).size.width/2,
                                  // color: Colors.red,
                                  child: Container(
                                      // elevation: 5.0,
                                      child: Html(
                                        data: this.widget.propertyDescription,
                                        defaultTextStyle: TextStyle(
                                            fontWeight: FontWeight.bold),
                                            customTextAlign: (_)=> TextAlign.justify,
                                      ))),
                              Divider(),
                            ],
                          ))
                      //  Text(this.widget.propertyCity),
                      // Html(data:this.widget.propertyDescription),
                    ],
                  ),
                ),
                  SizedBox(
                  height: 20.0,
                ),
                Padding(
                  padding: const EdgeInsets.only(left:16.0),
                  child: Text('NearBy', style: TextStyle(color: Theme.of(context).accentColor, fontWeight: FontWeight.bold),),
                ),
                 Divider(),
                 Padding(
                   padding: const EdgeInsets.only(left:5.0, right: 10.0),
                   child: Container(
                      padding: const EdgeInsets.only(left:10.0, right: 10.0),
                                    width: MediaQuery.of(context).size.width,
                                    // height: MediaQuery.of(context).size.width/2,
                                    // color: Colors.red,
                                    child: Container(
                                        // elevation: 5.0,
                                        child: Html(
                                          data: this.widget.nearBy,
                                          defaultTextStyle: TextStyle(
                                              fontWeight: FontWeight.bold),
                                              customTextAlign: (_)=> TextAlign.justify,
                                        ))),
                 ),
                             
                Divider(),
                SizedBox(
                  height: 20.0,
                ),
                Padding(
                  padding: const EdgeInsets.only(left:16.0),
                  child: Text('Contact Agent', style: TextStyle(color: Theme.of(context).accentColor, fontWeight: FontWeight.bold),),
                ),
              
                Divider(),
                SizedBox(
                  height: 10.0,
                ),
                //comment sections
                displayComment(),
                Divider(),
                SizedBox(
                  height: 10.0,
                ),
                islogin
                      ? commentSection()
                      : Container(
                        height: 50.0,
                        width: MediaQuery.of(context).size.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(20.0),
                            color: Theme.of(context).primaryColor,
                          ),
                          child: FlatButton(
                              onPressed: () {
                                Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                        builder: (context) => LoginScreen()));
                              },
                              child: Text('Login to Comment', style: TextStyle(color:Colors.white, fontSize:16.0),)),
                        ),
               
                Divider(),
                SizedBox(
                  height: 10.0,
                ),
              ],
            ),
    );
  }

  Container commentSection() {
    var outlineInputBorder = OutlineInputBorder(
      borderRadius: BorderRadius.circular(30.0),
      borderSide: BorderSide(color: Theme.of(context).primaryColor),
    );
    return Container(
      margin: EdgeInsets.all(16.0),
      child: Column(
        children: <Widget>[
          Text('Leave a comment'),
          SizedBox(height: 16.0),
          TextField(
            controller: txtbody,
            autocorrect: true,
            decoration: InputDecoration(
                border: outlineInputBorder,
                enabledBorder: outlineInputBorder,
                focusedBorder: outlineInputBorder,
                hintText: "Drop a Comment"),
          ),
          SizedBox(height: 16.0),
          Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(20.0),
              color: Theme.of(context).primaryColor,
            ),
            child: FlatButton(
                onPressed: () {
                  sendComment();
                },
                child: Text('Comment')),
          ),
        ],
      ),
    );
  }

 Container displayComment()
  {
    return Container(
      child:Column(
          children:List.generate(this._commentList.length, (i) {
          return Container(
            child:Column(
      children: <Widget>[
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
               CircleAvatar(
                backgroundImage:
                    NetworkImage(this._commentList[i].image),
                  
              ),
              Padding(
                padding: const EdgeInsets.only(left:16.0, right:8.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                     Text('${this._commentList[i].userName}', style: TextStyle(color: Colors.grey[600])),
                    Text('${this._commentList[i].body}'),
                 
                  ],
                ),
              )
            ],
          ),
        ),
        
      ],
            )
          );
          }
        )
        )
    );

  }
}
